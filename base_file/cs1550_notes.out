\BOOKMARK [0][-]{chapter.1}{Overview}{}% 1
\BOOKMARK [1][-]{section.1.1}{Operating Systems Manage Resources and Abstract Details}{chapter.1}% 2
\BOOKMARK [0][-]{chapter.2}{Basics and Terminology}{}% 3
\BOOKMARK [1][-]{section.2.1}{How to support multiprogramming}{chapter.2}% 4
\BOOKMARK [1][-]{section.2.2}{A Process's Address Space}{chapter.2}% 5
\BOOKMARK [1][-]{section.2.3}{OS Design Schemes}{chapter.2}% 6
\BOOKMARK [2][-]{subsection.2.3.1}{Monolotic OS}{section.2.3}% 7
\BOOKMARK [2][-]{subsection.2.3.2}{Microkernel OS}{section.2.3}% 8
\BOOKMARK [2][-]{subsection.2.3.3}{Which is better?}{section.2.3}% 9
\BOOKMARK [2][-]{subsection.2.3.4}{Virtual Machines}{section.2.3}% 10
\BOOKMARK [0][-]{chapter.3}{Processes}{}% 11
\BOOKMARK [1][-]{section.3.1}{Handling Processes}{chapter.3}% 12
\BOOKMARK [1][-]{section.3.2}{How to choose a process}{chapter.3}% 13
\BOOKMARK [1][-]{section.3.3}{User Threads and Kernel Threads}{chapter.3}% 14
\BOOKMARK [0][-]{chapter.4}{Scheduling}{}% 15
\BOOKMARK [1][-]{section.4.1}{How to pick?}{chapter.4}% 16
\BOOKMARK [2][-]{subsection.4.1.1}{When to schedule?}{section.4.1}% 17
\BOOKMARK [2][-]{subsection.4.1.2}{Where to schedule?}{section.4.1}% 18
\BOOKMARK [2][-]{subsection.4.1.3}{Classes of scheduling}{section.4.1}% 19
\BOOKMARK [1][-]{section.4.2}{Scheduling Algorithms}{chapter.4}% 20
\BOOKMARK [2][-]{subsection.4.2.1}{Metrics}{section.4.2}% 21
\BOOKMARK [2][-]{subsection.4.2.2}{Algorithm 1: First Come, First Serve}{section.4.2}% 22
\BOOKMARK [2][-]{subsection.4.2.3}{Algorithm 2: Shortest Job First}{section.4.2}% 23
\BOOKMARK [2][-]{subsection.4.2.4}{Algorithm 3: Round Robin Scheduling}{section.4.2}% 24
\BOOKMARK [2][-]{subsection.4.2.5}{Other Scheduling Algorithms}{section.4.2}% 25
\BOOKMARK [0][-]{chapter.5}{Interprocess Communication}{}% 26
\BOOKMARK [1][-]{section.5.1}{Preliminaries}{chapter.5}% 27
\BOOKMARK [1][-]{section.5.2}{Implementation 1: Strict Alternation}{chapter.5}% 28
\BOOKMARK [1][-]{section.5.3}{Peterson's Solution}{chapter.5}% 29
\BOOKMARK [1][-]{section.5.4}{Producer and Consumer Problem}{chapter.5}% 30
\BOOKMARK [1][-]{section.5.5}{Semaphores}{chapter.5}% 31
\BOOKMARK [2][-]{subsection.5.5.1}{Other synchronization primitives}{section.5.5}% 32
\BOOKMARK [2][-]{subsection.5.5.2}{The dining philosophers problem}{section.5.5}% 33
\BOOKMARK [1][-]{section.5.6}{Why the fuss?}{chapter.5}% 34
\BOOKMARK [0][-]{chapter.6}{Deadlock}{}% 35
\BOOKMARK [1][-]{section.6.1}{What is Deadlock}{chapter.6}% 36
\BOOKMARK [2][-]{subsection.6.1.1}{Necessary and Sufficient Conditions for Dead Lock}{section.6.1}% 37
\BOOKMARK [1][-]{section.6.2}{Dealing with Deadlocks}{chapter.6}% 38
\BOOKMARK [2][-]{subsection.6.2.1}{Algorithm 1: Ostrich Algorithm}{section.6.2}% 39
\BOOKMARK [2][-]{subsection.6.2.2}{Dead Lock Detection}{section.6.2}% 40
\BOOKMARK [2][-]{subsection.6.2.3}{Deadlock Recovery}{section.6.2}% 41
\BOOKMARK [2][-]{subsection.6.2.4}{Deadlock Avoidance}{section.6.2}% 42
\BOOKMARK [2][-]{subsection.6.2.5}{Algorithm 2: Banker's Algorithm}{section.6.2}% 43
\BOOKMARK [2][-]{subsection.6.2.6}{Deadlock Prevention}{section.6.2}% 44
\BOOKMARK [1][-]{section.6.3}{And the winner is?}{chapter.6}% 45
